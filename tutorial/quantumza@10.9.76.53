from qwanta import Tuner, QuantumNetwork, Configuration, Xperiment
from qwanta import QuantumNetwork, Configuration, Xperiment, Tuner
import pandas as pd
import ast
import numpy as np
import networkx as nx
from qwanta.Qubit import PhysicalQubit
from tqdm import tqdm
import random

def create_population(population_size, num_parameter=4):
    # create individual in population
    population = []
    for i in range(population_size):
        individual = [random.random() for i in range(num_parameter)]
        population.append(individual)
    
    return population
    
def Heaviside(x):
    if x >= 0:
        return 1
    else:
        return 0
    
# This calculate cost for one individual
def singleObject_cost(baseParameter, simParameter, w1, w2, objectFidelity, simFidelity):
    # cost function
    output = []
    for i in range(len(baseParameter)):
        k = np.log(simParameter[i])/np.log(baseParameter[i])
        output.append(k)

    cost = sum(output)

    cost_single_objective = w1*Heaviside(simFidelity - objectFidelity) + w2*cost

    return cost_single_objective

def visualize(result):
    to_print = ['fidelity', 'simulation_time', 'Resources Produced', 'Base Resources Attempt', 'Resource Used in Fidelity Estimation', 'Time used', 'Fidelity Estimation Time']
    for key in to_print:
        print(f'{key}: {result[key]}')

def normalize_list(l):
    return [i/sum(l) for i in l]

def roulette_wheel_selection(population, costs):
    """
        Performs roulette wheel selection on a population based on their fitnesses.
        Args:
            population (list): List of individuals.
            fitnesses (list): List of corresponding fitness values for the individuals.
            num_selected (int): Number of individuals to select.
        Returns:
            selected (list): List of selected individuals.
    """

    max_cost = 1
    fitnesses = [max_cost +1 -cost for cost in costs]
    probabilities = normalize_list(fitnesses)

    # checked that sum(probabilities) = 1
    if sum(probabilities) < 0.999:
        print(f'Sum Probability: {sum(probabilities)}')
        raise ValueError('Probabilities must sum to 1.')
    elif sum(probabilities) > 1.001:
        print(f'Sum Probability: {sum(probabilities)}')
        raise ValueError('Probabilities must not over 1.')
        
    selected = []
    # parent size = 5
    while len(selected) < 5:

        index = np.random.multinomial(1, probabilities).argmax()
        chosen_parent = population[index]

        selected.append(chosen_parent)

        del population[index]
        del probabilities[index]
        
    return selected

def crossover(parents, cross=0.8):
    offspring = []
    numParent = len(parents)

    num_cross = int(cross*len(parents))
    num_pick = len(parents) - num_cross

    for i in range(num_cross):
        #select two parents
        pool = parents
        parent1 = random.choice(pool)
        parent2 = random.choice(pool)
        #select random point to crossover
        crossover_point = random.randint(0, len(parent1)-1)
            
        #create child
        child = parent1[:crossover_point] + parent2[crossover_point:]
        offspring.append(child)
        # print(f'child offspring {offspring}')

    for i in range(num_pick):
        picked_ind = random.choice(parents)
        offspring.append(picked_ind)
        del parents[parents.index(picked_ind)]

    if num_cross+num_pick != numParent:
        print(f'Num cross: {num_cross}, Num pick: {num_pick}, Num parents: {numParent}')
        raise ValueError('Number is not match in crossover function parent')
    elif num_cross+num_pick != len(offspring):
        print(f'Num cross: {num_cross}, Num pick: {num_pick}, Num offspring: {len(offspring)}')
        raise ValueError('Number is not match in crossover function offspring')

    return offspring

def mutate(children, mutationRate=0.05):
    for i in range(len(children)):
        
        if random.random() < mutationRate:
            children[i][random.randint(0, len(children[0])-1)] = random.random()
    return children

def parameterTransform(loss, coherenceTime, gateErr, meaErr):
    '''
    This function change the [0-1] value into real simulation value

    # value from Bsc_Thesis
    meaErr: 0.01, 0.03, 0.05
    memoryTime: 0.25, 0.5, 1 second
    gate error 0.01, 0.03
    loss: 0.001, 0.003, 0.005, 0.007 dB/km

    # plan to normalize value in interval of previous research
    meaErr: 0 - 0.10
    memoryTime: 0 - 1
    gateError: 0 - 0.05
    loss 0.001 - 0.010

    '''
    # loss = loss[0]
    # coherenceTime = coherenceTime[0]
    # gateErr = gateErr[0]
    # meaErr = meaErr[0]

    lossSim = 0.010 - loss*0.010 # loss sim interval [0, 0.01], 0-> 0.01, 1->0
    coherenceTimeSim = coherenceTime
    gateErrSim = 0.03 - gateErr*0.03
    meaErrSim = 0.1 - meaErr*0.1
    return lossSim, coherenceTimeSim, gateErrSim, meaErrSim

print('import success')